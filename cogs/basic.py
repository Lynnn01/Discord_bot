import discord
from discord import app_commands
from discord.ext import commands
import random
from datetime import datetime
import logging
from typing import Dict, Optional
from dataclasses import dataclass
from functools import lru_cache

# ‡πÉ‡∏ä‡πâ logger ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
logger = logging.getLogger(__name__)


@dataclass
class StatusInfo:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""

    color: discord.Color
    emoji: str
    description: str


class Basic(commands.Cog):
    """Cog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô roll ‡πÅ‡∏•‡∏∞ ping"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.bot_start_time = datetime.utcnow()
        self._command_stats: Dict[str, int] = {"roll": 0, "ping": 0}

        # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.LATENCY_THRESHOLDS = {
            100: StatusInfo(discord.Color.green(), "üü¢", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏°‡∏≤‡∏Å"),
            200: StatusInfo(discord.Color.yellow(), "üü°", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"),
            float("inf"): StatusInfo(discord.Color.red(), "üî¥", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≤"),
        }

        # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
        self.ROLL_COLORS = {
            20: discord.Color.gold(),  # Critical success
            15: discord.Color.green(),  # High roll
            10: discord.Color.blue(),  # Medium roll
            5: discord.Color.greyple(),  # Low roll
            1: discord.Color.red(),  # Critical fail
        }

    async def cog_load(self) -> None:
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ cog ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î"""
        logger.info("‚úÖ Basic cog ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

    async def cog_unload(self) -> None:
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ cog ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î"""
        logger.info(f"üîÑ Basic cog ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {self._command_stats}")

    async def cog_app_command_error(
        self, interaction: discord.Interaction, error: app_commands.AppCommandError
    ) -> None:
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á slash commands ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"""
        error_messages = {
            app_commands.CommandOnCooldown: f"‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {error.retry_after:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
            app_commands.MissingPermissions: "üö´ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
            app_commands.BotMissingPermissions: "‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
            app_commands.CommandNotFound: "‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
        }

        response = error_messages.get(type(error), "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await interaction.response.send_message(response, ephemeral=True)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        logger.error(f"üêõ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {interaction.command.name}: {str(error)}")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if hasattr(self.bot, "stats"):
            self.bot.stats["errors_caught"] += 1

    @app_commands.command(name="roll", description="üé≤ ‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ D20")
    @app_commands.checks.cooldown(1, 3.0)
    async def roll(self, interaction: discord.Interaction):
        """‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ D20 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©"""
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            self._command_stats["roll"] += 1

            # ‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
            roll_value = random.randint(1, 20)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
            emoji = self._get_roll_emoji(roll_value)
            embed = await self._create_roll_embed(roll_value, emoji, interaction.user)

            # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            await interaction.response.send_message(embed=embed)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å
            logger.debug(f"üé≤ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ {roll_value}")

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á roll: {str(e)}")
            await self._send_error_message(interaction)

    @app_commands.command(name="ping", description="üèì ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
    @app_commands.checks.cooldown(1, 5.0)
    async def ping(self, interaction: discord.Interaction):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"""
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            self._command_stats["ping"] += 1

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì latency
            latency = round(self.bot.latency * 1000)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á embed
            embed = await self._create_ping_embed(latency, interaction.user)
            await interaction.response.send_message(embed=embed)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å
            logger.debug(
                f"üèì Ping command - Latency: {latency}ms ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user}"
            )

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping: {str(e)}")
            await self._send_error_message(interaction)

    @lru_cache(maxsize=128)
    def _get_roll_color(self, roll: int) -> discord.Color:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ (cached)"""
        for threshold, color in sorted(self.ROLL_COLORS.items(), reverse=True):
            if roll >= threshold:
                return color
        return discord.Color.greyple()

    def _get_roll_emoji(self, roll: int) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î emoji ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ"""
        emoji_map = {
            20: "üåü",  # Critical success
            1: "üí•",  # Critical fail
            15: "‚ú®",  # High roll
            10: "üé≤",  # Medium roll
            5: "üéØ",  # Low roll
        }
        for threshold, emoji in sorted(emoji_map.items(), reverse=True):
            if roll >= threshold:
                return emoji
        return "üé≤"

    def _get_status_info(self, latency: int) -> StatusInfo:
        """‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ latency"""
        for threshold, info in sorted(self.LATENCY_THRESHOLDS.items()):
            if latency < threshold:
                return info
        return self.LATENCY_THRESHOLDS[float("inf")]

    async def _create_roll_embed(
        self, roll: int, emoji: str, user: discord.User
    ) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á roll"""
        embed = discord.Embed(
            title=f"{emoji} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ D20", color=self._get_roll_color(roll)
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢
        embed.add_field(name="üéØ ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ", value=f"**{roll}**", inline=False)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if roll == 20:
            embed.add_field(
                name="üéâ Critical Success!", value="‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î! ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!", inline=False
            )
        elif roll == 1:
            embed.add_field(
                name="üíî Critical Fail!", value="‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î! ‡πÇ‡∏ä‡∏Ñ‡∏£‡πâ‡∏≤‡∏¢‡∏à‡∏±‡∏á!", inline=False
            )
        elif roll >= 15:
            embed.add_field(name="‚ú® Great Roll!", value="‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á!", inline=False)

        embed.set_footer(text=f"üé≤ ‡∏ó‡∏≠‡∏¢‡πÇ‡∏î‡∏¢ {user.name}")
        embed.timestamp = discord.utils.utcnow()

        return embed

    async def _create_ping_embed(
        self, latency: int, user: discord.User
    ) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping"""
        status_info = self._get_status_info(latency)
        uptime = self._format_uptime()

        embed = discord.Embed(
            title="üèì Pong!",
            description="üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö",
            color=status_info.color,
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
        embed.add_field(name="üöÄ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á", value=f"`{latency}ms`", inline=True)
        embed.add_field(
            name="üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            value=f"{status_info.emoji} {status_info.description}",
            inline=True,
        )
        embed.add_field(name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", value=uptime, inline=True)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats = self._get_bot_stats()
        embed.add_field(name="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value=stats, inline=False)

        embed.timestamp = discord.utils.utcnow()
        embed.set_footer(text=f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢ {user.name}")

        return embed

    def _format_uptime(self) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ uptime ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        uptime = datetime.utcnow() - self.bot_start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        parts = []
        if days > 0:
            parts.append(f"{days} ‡∏ß‡∏±‡∏ô")
        if hours > 0:
            parts.append(f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        if minutes > 0:
            parts.append(f"{minutes} ‡∏ô‡∏≤‡∏ó‡∏µ")
        parts.append(f"{seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        return " ".join(parts)

    def _get_bot_stats(self) -> str:
        """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"""
        guild_count = len(self.bot.guilds)
        member_count = sum(g.member_count for g in self.bot.guilds)
        total_commands = sum(self._command_stats.values())

        return (
            f"üè¢ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {guild_count}\n"
            f"üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {member_count:,}\n"
            f"üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {total_commands:,}\n"
            f"üé≤ Roll: {self._command_stats['roll']:,}\n"
            f"üèì Ping: {self._command_stats['ping']:,}"
        )

    async def _send_error_message(self, interaction: discord.Interaction) -> None:
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        await interaction.response.send_message(
            "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True
        )


async def setup(bot: commands.Bot):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° cog ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ö‡∏≠‡∏ó"""
    await bot.add_cog(Basic(bot))
