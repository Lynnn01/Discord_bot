# bot.py
import discord
from discord.ext import commands
import os
from dotenv import load_dotenv
import asyncio
import time
from typing import Dict, List, Optional
from concurrent.futures import ThreadPoolExecutor
from logging_config import setup_logging  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö logging ‡πÉ‡∏´‡∏°‡πà

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger
logger = setup_logging()


class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(
            command_prefix="!",
            intents=discord.Intents.all(),
            application_id=os.getenv("APPLICATION_ID"),
        )
        self.start_time = time.time()
        self.executor = ThreadPoolExecutor(max_workers=3)
        self.stats: Dict[str, int] = {
            "commands_used": 0,
            "errors_caught": 0,
            "messages_processed": 0,
        }

    async def close(self):
        """Cleanup resources when bot shuts down"""
        logger.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó...")
        self.executor.shutdown(wait=False)
        await super().close()

    async def load_cogs(self) -> Dict[str, int]:
        """‡πÇ‡∏´‡∏•‡∏î cogs ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
        stats = {"loaded": 0, "failed": 0, "skipped": 0, "total": 0}
        skip_files = frozenset(["__init__.py", "__pycache__", "temp", "test", "draft"])

        try:
            if not os.path.exists("./cogs"):
                logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå cogs - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á")
                os.makedirs("./cogs")

            for filename in os.listdir("./cogs"):
                stats["total"] += 1

                if filename in skip_files or any(
                    filename.startswith(skip) for skip in skip_files
                ):
                    logger.debug(f"‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: {filename}")
                    stats["skipped"] += 1
                    continue

                if filename.endswith(".py"):
                    await self._load_single_cog(f"cogs.{filename[:-3]}", stats)

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î cogs: {str(e)}")
            raise

        return stats

    async def _load_single_cog(self, extension: str, stats: Dict[str, int]) -> None:
        """‡πÇ‡∏´‡∏•‡∏î cog ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        try:
            await self.load_extension(extension)
            logger.info(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {extension} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            stats["loaded"] += 1
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î {extension}: {str(e)}")
            stats["failed"] += 1

    async def sync_commands(self) -> Optional[List[discord.app_commands.Command]]:
        """Sync commands with enhanced logging"""
        try:
            if os.getenv("DEV_MODE") == "true":
                dev_guild_id = os.getenv("DEV_GUILD_ID")
                if not dev_guild_id:
                    raise ValueError("DEV_MODE ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö DEV_GUILD_ID")

                guild = discord.Object(id=int(dev_guild_id))
                self.tree.copy_global_to(guild=guild)
                return await self.tree.sync(guild=guild)
            else:
                return await self.tree.sync()

        except discord.HTTPException as e:
            logger.error(f"‚ùå HTTP Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync: {e.status} - {e.text}")
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync: {str(e)}")
        return None

    async def setup_hook(self):
        """Setup hook with improved logging"""
        logger.info("\n=== üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó ===")
        start_time = time.time()

        try:
            stats = await self.load_cogs()

            logger.info("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î cogs:")
            logger.info(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {stats['loaded']}")
            logger.info(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {stats['failed']}")
            logger.info(f"   ‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: {stats['skipped']}")
            logger.info(f"   üìÅ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats['total']}")

            logger.info("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á sync commands...")
            synced = await self.sync_commands()
            if synced:
                logger.info(f"‚úÖ Synced {len(synced)} commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            setup_time = round(time.time() - start_time, 2)
            logger.info(f"\n‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {setup_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        except Exception as e:
            logger.critical(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó: {str(e)}")
            raise

    async def on_ready(self):
        """Enhanced on_ready with better logging"""
        uptime = time.time() - self.start_time
        guild_count = len(self.guilds)
        total_members = sum(guild.member_count for guild in self.guilds)

        logger.info("\n=== ‚ú® ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ===")
        logger.info(f"ü§ñ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠: {self.user} (ID: {self.user.id})")
        logger.info(f"‚è±Ô∏è ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô: {uptime:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        logger.info(f"\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:")
        logger.info(f"   üíª ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {guild_count}")
        logger.info(f"   üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_members}")

        guild_info = "\n".join(
            f"   ‚Ä¢ {guild.name} (ID: {guild.id}, ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {guild.member_count})"
            for guild in self.guilds
        )
        logger.info(f"\nüì° ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:\n{guild_info}")


async def main():
    """Main function with enhanced error handling"""
    try:
        load_dotenv()

        required_vars = {"DISCORD_TOKEN", "APPLICATION_ID"}
        missing_vars = [var for var in required_vars if not os.getenv(var)]

        if missing_vars:
            raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {', '.join(missing_vars)}")

        async with MyBot() as bot:
            await bot.start(os.getenv("DISCORD_TOKEN"))

    except ValueError as e:
        logger.critical(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {str(e)}")
        raise
    except Exception as e:
        logger.critical(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏î Ctrl+C\n")
    except Exception as e:
        logger.critical(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}\n")
        raise
