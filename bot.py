import discord
from discord.ext import commands
import os
import sys
from pathlib import Path
import time
from typing import Dict, Optional
from concurrent.futures import ThreadPoolExecutor
from discord import app_commands

# Add src to Python path
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

from src.utils.logging_config import setup_logger
from src.utils.error_handler import GlobalErrorHandler
from src.utils.dev_mode_mixin import DevModeMixin

logger = setup_logger()


class MyBot(commands.Bot, DevModeMixin):
    def __init__(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ dev_mode ‡∏à‡∏≤‡∏Å environment variable
        self.dev_mode = os.getenv("DEV_MODE", "false").lower() == "true"

        intents = discord.Intents.all()
        super().__init__(
            command_prefix="!",
            intents=intents,
            application_id=os.getenv("APPLICATION_ID"),
        )
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ command tree
        self.tree.on_error = self._handle_tree_error

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ base_dir
        self.base_dir = Path(__file__).parent / "src"

        self.start_time = time.time()
        self.executor = ThreadPoolExecutor(max_workers=3)
        self.stats: Dict[str, int] = {
            "commands_used": 0,
            "errors_caught": 0,
            "messages_processed": 0,
            "ping": 0,
            "roll": 0,
        }

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.ensure_directory_structure()

        self.error_handler = GlobalErrorHandler(self)

    def ensure_directory_structure(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        try:
            required_folders = [
                self.base_dir / "cogs",
                self.base_dir / "commands",
                self.base_dir / "utils",
            ]

            if self.dev_mode:
                required_folders.append(self.base_dir / "dev_tools")

            for folder in required_folders:
                folder.mkdir(parents=True, exist_ok=True)
                logger.info(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder.relative_to(self.base_dir)}")

                init_file = folder / "__init__.py"
                if not init_file.exists():
                    init_file.touch()
                    logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {init_file.relative_to(self.base_dir)}")

        except PermissionError:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
            raise
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: {str(e)}")
            raise

    async def setup_hook(self):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dev Mode
            await self.validate_dev_guild()
            
            if self.dev_mode:
                # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å guild ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô dev guild
                for guild in self.guilds:
                    await self.handle_dev_mode(guild)
                    
                logger.info(f"üîí Dev Mode: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô guild {self.dev_guild_id}")

            # ‡πÇ‡∏´‡∏•‡∏î cogs
            cog_list = ["src.cogs.commands", "src.cogs.event_handler"]
            if self.dev_mode:
                cog_list.append("src.cogs.dev_tools")

            for cog in cog_list:
                await self.load_extension(cog)
                logger.info(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {cog} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô setup_hook: {str(e)}")
            raise

    async def on_guild_join(self, guild: discord.Guild):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤ guild ‡πÉ‡∏´‡∏°‡πà"""
        if self.dev_mode:
            dev_guild_id = int(os.getenv("DEV_GUILD_ID", "0"))
            if guild.id != dev_guild_id:
                logger.info(f"üëã ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° guild {guild.name} (Dev Mode)")
                await guild.leave()
                return

        logger.info(f"‚ú® ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° guild {guild.name} ({guild.id}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    async def on_ready(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        logger.info(f"‚úÖ Logged in as {self.user} (ID: {self.user.id})")
        logger.info(f"üìä Connected to {len(self.guilds)} guilds")

    async def _handle_tree_error(
        self,
        interaction: discord.Interaction,
        error: app_commands.AppCommandError
    ):
        await self.error_handler.handle_error(interaction, error)
