import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict


class PrettyFormatter(logging.Formatter):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á log format ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""

    # ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢
    COLORS = {
        "WHITE": "\033[37m",
        "GREEN": "\033[32m",
        "YELLOW": "\033[33m",
        "RED": "\033[31m",
        "BOLD_RED": "\033[31;1m",
        "RESET": "\033[0m",
    }

    # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö log
    LEVEL_COLORS = {
        "DEBUG": COLORS["WHITE"],
        "INFO": COLORS["GREEN"],
        "WARNING": COLORS["YELLOW"],
        "ERROR": COLORS["RED"],
        "CRITICAL": COLORS["BOLD_RED"],
    }

    # Emoji ‡πÅ‡∏•‡∏∞ prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
    LEVEL_STYLES = {
        "DEBUG": ("üîç", "DEBUG"),
        "INFO": ("‚ú®", "INFO"),
        "WARNING": ("‚ö†Ô∏è", "WARN"),
        "ERROR": ("‚ùå", "ERROR"),
        "CRITICAL": ("üí•", "FATAL"),
    }

    def __init__(self, colored: bool = True):
        """
        Args:
            colored: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ
        """
        self.colored = colored and sys.stderr.isatty()
        super().__init__()

    def format(self, record: logging.LogRecord) -> str:
        # ‡∏£‡∏±‡∏ö emoji ‡πÅ‡∏•‡∏∞ prefix
        emoji, prefix = self.LEVEL_STYLES.get(record.levelname, ("", record.levelname))

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        time_str = datetime.fromtimestamp(record.created).strftime("%H:%M:%S")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
        if self.colored:
            color = self.LEVEL_COLORS.get(record.levelname, "")
            level_prefix = f"{color}{emoji} {prefix:5}{self.COLORS['RESET']}"
        else:
            level_prefix = f"{emoji} {prefix:5}"

        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ debug)
        if record.levelno == logging.DEBUG:
            file_info = f"[{record.filename}:{record.lineno}] "
        else:
            file_info = ""

        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log
        return f"{time_str} {level_prefix} {file_info}{record.getMessage()}"


def setup_logger(log_dir: str = "logs") -> logging.Logger:
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢

    Args:
        log_dir: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå log

    Returns:
        Logger ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    """
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á logger
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    # ‡∏•‡πâ‡∏≤‡∏á handler ‡πÄ‡∏Å‡πà‡∏≤
    logger.handlers.clear()

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ console handler
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    console.setFormatter(PrettyFormatter(colored=True))
    logger.addHandler(console)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ file handler
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        log_path = Path(log_dir)
        log_path.mkdir(parents=True, exist_ok=True)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        today = datetime.now().strftime("%Y-%m-%d")
        file_handler = logging.FileHandler(
            log_path / f"bot_{today}.log", encoding="utf-8"
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(PrettyFormatter(colored=False))
        logger.addHandler(file_handler)

    except Exception as e:
        console.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡πÑ‡∏î‡πâ: {e}")

    return logger


if __name__ == "__main__":
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    logger = setup_logger()

    logger.debug("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
    logger.info("‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    logger.warning("‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤")
    logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
    logger.critical("‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á")
