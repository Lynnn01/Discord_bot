from dataclasses import dataclass
from typing import Dict, List, Optional
import discord
from discord import app_commands
import logging
from datetime import datetime
from .base_command import BaseCommand
from utils.embed_builder import EmbedBuilder

logger = logging.getLogger(__name__)


@dataclass
class CommandInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""

    name: str
    description: str
    usage: str
    emoji: str
    examples: List[str]
    category: str = "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
    options: List[str] = None
    dev_only: bool = False
    cooldown: Optional[int] = None
    permissions: List[str] = None


class HelpCommand(BaseCommand):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dev Mode"""

    def __init__(self, bot):
        super().__init__(bot)
        self.categories = {
            "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": "üîß",
            "‡πÄ‡∏Å‡∏°": "üéÆ",
            "‡∏£‡∏∞‡∏ö‡∏ö": "‚öôÔ∏è",
            "‡∏û‡∏±‡∏í‡∏ô‡∏≤": "üõ†Ô∏è",  # ‡∏™‡∏≥‡∏£‡∏±‡∏ö dev commands
        }
        self.command_info = self._setup_command_info()

    def _setup_command_info(self) -> Dict[str, Dict]:
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        return {
            "ping": {
                "emoji": "üèì",
                "category": "‡∏£‡∏∞‡∏ö‡∏ö",
                "examples": [
                    "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
                    "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó",
                    "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
                ],
                "cooldown": 5,
                "dev_only": False,
            },
            "roll": {
                "emoji": "üé≤",
                "category": "‡πÄ‡∏Å‡∏°",
                "examples": [
                    "‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à",
                    "‡∏ó‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏∏‡πâ‡∏ô Critical Success (20)",
                    "‡∏î‡∏π‡πÇ‡∏ä‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
                ],
                "cooldown": 3,
                "dev_only": False,
            },
            "help": {
                "emoji": "‚ùì",
                "category": "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
                "examples": [
                    "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /help",
                    "‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞: /help [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á]",
                ],
                "cooldown": None,
                "dev_only": False,
            },
            "dev": {
                "emoji": "üõ†Ô∏è",
                "category": "‡∏û‡∏±‡∏í‡∏ô‡∏≤",
                "examples": [
                    "/dev action:Sync Commands scope:Guild - ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
                    "/dev action:Sync Commands scope:Global - ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                    "/dev action:Reload Cogs cog:all - ‡πÇ‡∏´‡∏•‡∏î cogs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà",
                    "/dev action:Reload Cogs cog:commands - ‡πÇ‡∏´‡∏•‡∏î cog ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏´‡∏°‡πà",
                    "/dev action:Show Status - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö",
                    "/dev action:Cleanup Commands - ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤",
                ],
                "cooldown": None,
                "dev_only": True,
                "permissions": ["Administrator"],
                "options": [
                    "`action`: ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)",
                    "`scope`: ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£ sync - global/guild (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sync Commands)",
                    "`cog`: ‡∏ä‡∏∑‡πà‡∏≠ cog ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reload (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reload Cogs)",
                ],
            },
        }

    def _build_usage_string(self, command: app_commands.Command) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        usage = f"/{command.name}"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if command.name == "dev":
            return (
                f"{usage} action:<Sync/Reload/Status/Cleanup> "
                "[scope:guild/global] [cog:name]"
            )

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        if hasattr(command, "_params"):
            for param in command._params.values():
                param_str = (
                    f" [{param.name}]" if not param.required else f" <{param.name}>"
                )
                usage += param_str

        return usage

    def _get_command_info(self, command: app_commands.Command) -> CommandInfo:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CommandInfo ‡∏à‡∏≤‡∏Å Command object"""
        base_info = self.command_info.get(command.name, {})
        options = []
        permissions = []

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
        if hasattr(command, "default_permissions"):
            perms = command.default_permissions
            if perms:
                permissions = [perm for perm, value in perms.items() if value]

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• options
        if hasattr(command, "_params"):
            for param in command._params.values():
                option_desc = f"`{param.name}`"
                if param.description:
                    option_desc += f": {param.description}"
                if not param.required:
                    option_desc += " (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)"
                options.append(option_desc)

        return CommandInfo(
            name=command.name,
            description=command.description or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
            usage=self._build_usage_string(command),
            emoji=base_info.get("emoji", "üîπ"),
            examples=base_info.get("examples", ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"]),
            category=base_info.get("category", "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"),
            options=options,
            dev_only=base_info.get("dev_only", False),
            cooldown=base_info.get("cooldown"),
            permissions=permissions,
        )

    def _filter_commands(self, commands) -> List[app_commands.Command]:
        """‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        filtered_commands = []
        for command in commands:
            cmd_info = self.command_info.get(command.name, {})
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô dev mode
            if cmd_info.get("dev_only", False) and not self.bot.dev_mode:
                continue
            filtered_commands.append(command)
        return filtered_commands

    async def execute(
        self,
        interaction: discord.Interaction,
        command_stats: Dict[str, int],
        command_name: Optional[str] = None,
    ):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help"""
        try:
            command_stats["help"] = command_stats.get("help", 0) + 1

            if command_name:
                # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å CommandTree
                command = self.bot.tree.get_command(command_name)
                if not command:
                    raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `{command_name}`")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
                cmd_info = self.command_info.get(command_name, {})
                if cmd_info.get("dev_only", False) and not self.bot.dev_mode:
                    raise ValueError("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

                embed = await self._create_command_detail_embed(command)
            else:
                embed = await self._create_commands_overview_embed()

            await interaction.response.send_message(embed=embed)
            logger.info(
                f"üîç ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏Ç‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {command_name if command_name else '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}"
            )

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help: {str(e)}")
            await interaction.response.send_message(f"‚ùå {str(e)}", ephemeral=True)

    async def _create_command_detail_embed(
        self, command: app_commands.Command
    ) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        cmd_info = self._get_command_info(command)
        category_emoji = self.categories.get(cmd_info.category, "üìÅ")

        builder = (
            EmbedBuilder()
            .set_title(f"‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd_info.name}", emoji=cmd_info.emoji)
            .set_description(cmd_info.description)
            .set_color(discord.Color.blue())
            .add_field(
                name="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                value=f"{category_emoji} {cmd_info.category}",
                emoji="üìÇ",
                inline=True,
            )
            .add_field(
                name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", value=f"`{cmd_info.usage}`", emoji="üìù", inline=True
            )
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cooldown
        if cmd_info.cooldown:
            builder.add_field(
                name="Cooldown",
                value=f"{cmd_info.cooldown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
                emoji="‚è±Ô∏è",
                inline=True,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if cmd_info.permissions:
            builder.add_field(
                name="‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
                value="\n".join(f"‚Ä¢ {perm}" for perm in cmd_info.permissions),
                emoji="üîí",
                inline=True,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if cmd_info.options:
            builder.add_field(
                name="‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå",
                value="\n".join(f"‚Ä¢ {opt}" for opt in cmd_info.options),
                emoji="üîß",
                inline=False,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        builder.add_field(
            name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            value="\n".join(f"‚Ä¢ {example}" for example in cmd_info.examples),
            emoji="üí°",
            inline=False,
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Dev Mode ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if cmd_info.dev_only:
            builder.set_footer("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", emoji="‚ö†Ô∏è")
        else:
            builder.set_footer("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏îÔøΩÔøΩ‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        return builder.build()

    async def _create_commands_overview_embed(self) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        commands_by_category = {}

        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        commands = self._filter_commands(self.bot.tree.get_commands())
        for command in commands:
            cmd_info = self._get_command_info(command)
            if cmd_info.category not in commands_by_category:
                commands_by_category[cmd_info.category] = []
            commands_by_category[cmd_info.category].append(cmd_info)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
        builder = (
            EmbedBuilder()
            .set_title("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", emoji="üìö")
            .set_description(
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                + ("\n‚ö†Ô∏è *‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤*" if self.bot.dev_mode else "")
            )
            .set_color(discord.Color.blue())
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for category, commands in commands_by_category.items():
            category_emoji = self.categories.get(category, "üìÅ")
            commands_text = []
            for cmd in sorted(commands, key=lambda x: x.name):
                text = f"{cmd.emoji} `/{cmd.name}`"
                if cmd.cooldown:
                    text += f" `‚è±Ô∏è{cmd.cooldown}s`"
                text += f" ‚Ä¢ {cmd.description}"
                commands_text.append(text)

            if commands_text:  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
                builder.add_field(
                    name=f"{category_emoji} {category}",
                    value="\n".join(commands_text),
                    inline=False,
                )

        return builder.set_footer(
            text="üí° ‡∏û‡∏¥‡∏°‡∏û‡πå /help [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", emoji="‚ùì"
        ).build()
