from dataclasses import dataclass
from typing import Dict, List, Optional
import discord
from discord import app_commands
import logging
from datetime import datetime
from .base_command import BaseCommand
from utils.embed_builder import EmbedBuilder

logger = logging.getLogger(__name__)


@dataclass
class CommandInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
    name: str
    description: str
    usage: str
    emoji: str
    examples: List[str]
    category: str = "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
    options: List[str] = None
    dev_only: bool = False
    cooldown: Optional[int] = None
    permissions: List[str] = None


class HelpCommand(BaseCommand):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dev Mode"""

    def __init__(self, bot):
        super().__init__(bot)
        self.categories = {
            "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": "üîß",
            "‡πÄ‡∏Å‡∏°": "üéÆ",
            "‡∏£‡∏∞‡∏ö‡∏ö": "‚öôÔ∏è",
            "‡∏û‡∏±‡∏í‡∏ô‡∏≤": "üõ†Ô∏è",
        }
        self.command_info = self._setup_command_info()

    def _setup_command_info(self) -> Dict[str, Dict]:
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        return {
            "ping": {
                "emoji": "üèì",
                "category": "‡∏£‡∏∞‡∏ö‡∏ö",
                "examples": [
                    "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á: /ping",
                    "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Latency ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
                ],
                "cooldown": 5,
                "dev_only": False,
                "description": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"
            },
            "roll": {
                "emoji": "üé≤",
                "category": "‡πÄ‡∏Å‡∏°",
                "examples": [
                    "‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ 1-6: /roll",
                    "‡∏•‡∏∏‡πâ‡∏ô‡∏î‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!",
                ],
                "cooldown": 3,
                "dev_only": False,
                "description": "‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"
            },
            "help": {
                "emoji": "‚ùì",
                "category": "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
                "examples": [
                    "‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /help",
                    "‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞: /help [‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á]",
                ],
                "cooldown": None,
                "dev_only": False,
                "description": "‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"
            }
        }

    def get_command_choices(self) -> List[app_commands.Choice]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help"""
        choices = []
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        choices.append(
            app_commands.Choice(
                name="üìö ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                value="all"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "" ‡πÄ‡∏õ‡πá‡∏ô "all"
            )
        )
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        for cmd_name, info in self.command_info.items():
            # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô dev mode
            if info.get("dev_only") and not self.bot.dev_mode:
                continue
                
            display_name = (
                f"{info['emoji']} {cmd_name} - {info['description'][:30]}"
                + ("..." if len(info['description']) > 30 else "")
            )
            
            if info.get('cooldown'):
                display_name += f" ‚è±Ô∏è{info['cooldown']}s"
                
            choices.append(
                app_commands.Choice(
                    name=display_name,
                    value=cmd_name
                )
            )
            
        return choices

    async def execute(
        self,
        interaction: discord.Interaction,
        command_stats: Dict[str, int],
        command_name: Optional[str] = None,
    ):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help"""
        try:
            command_stats["help"] = command_stats.get("help", 0) + 1

            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "all" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if not command_name or command_name == "all":
                embed = await self._create_commands_overview_embed()
            else:
                # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å CommandTree
                command = self.bot.tree.get_command(command_name)
                if not command:
                    raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `{command_name}`")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
                cmd_info = self.command_info.get(command_name, {})
                if cmd_info.get("dev_only", False) and not self.bot.dev_mode:
                    raise ValueError("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

                embed = await self._create_command_detail_embed(command)

            await interaction.response.send_message(embed=embed)
            logger.info(
                f"üîç ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {command_name if command_name and command_name != 'all' else '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}"
            )

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help: {str(e)}")
            await interaction.response.send_message(
                f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", 
                ephemeral=True
            )



    async def _create_command_detail_embed(
        self, command: app_commands.Command
    ) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        cmd_info = self._get_command_info(command)
        category_emoji = self.categories.get(cmd_info.category, "üìÅ")

        builder = (
            EmbedBuilder()
            .set_title(f"{cmd_info.emoji} ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd_info.name}")
            .set_description(cmd_info.description)
            .set_color(discord.Color.blue())
            .add_field(
                name="üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                value=f"{category_emoji} {cmd_info.category}",
                inline=True,
            )
            .add_field(
                name="üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ",
                value=f"`{cmd_info.usage}`",
                inline=True,
            )
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cooldown
        if cmd_info.cooldown:
            builder.add_field(
                name="‚è±Ô∏è Cooldown",
                value=f"{cmd_info.cooldown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
                inline=True,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if cmd_info.permissions:
            builder.add_field(
                name="üîí ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
                value="\n".join(f"‚Ä¢ {perm}" for perm in cmd_info.permissions),
                inline=True,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if cmd_info.options:
            builder.add_field(
                name="üîß ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå",
                value="\n".join(f"‚Ä¢ {opt}" for opt in cmd_info.options),
                inline=False,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        builder.add_field(
            name="üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            value="\n".join(f"‚Ä¢ {example}" for example in cmd_info.examples),
            inline=False,
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏° Dev Mode ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if cmd_info.dev_only:
            builder.set_footer(text="‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        else:
            builder.set_footer(text="üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        return builder.build()

    async def _create_commands_overview_embed(self) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        commands_by_category = {}

        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        commands = self._filter_commands(self.bot.tree.get_commands())
        for command in commands:
            cmd_info = self._get_command_info(command)
            if cmd_info.category not in commands_by_category:
                commands_by_category[cmd_info.category] = []
            commands_by_category[cmd_info.category].append(cmd_info)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
        builder = (
            EmbedBuilder()
            .set_title("üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            .set_description(
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                + ("\n‚ö†Ô∏è *‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤*" if self.bot.dev_mode else "")
            )
            .set_color(discord.Color.blue())
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for category, commands in sorted(commands_by_category.items()):
            category_emoji = self.categories.get(category, "üìÅ")
            commands_text = []
            for cmd in sorted(commands, key=lambda x: x.name):
                text = f"{cmd.emoji} `/{cmd.name}`"
                if cmd.cooldown:
                    text += f" `‚è±Ô∏è{cmd.cooldown}s`"
                text += f" ‚Ä¢ {cmd.description}"
                commands_text.append(text)

            if commands_text:  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
                builder.add_field(
                    name=f"{category_emoji} {category}",
                    value="\n".join(commands_text),
                    inline=False,
                )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° footer ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        total_commands = sum(len(cmds) for cmds in commands_by_category.values())
        builder.set_footer(
            text=f"üí° ‡∏û‡∏¥‡∏°‡∏û‡πå /help [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‚Ä¢ ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_commands} ‡∏Ñ‡∏≥‡∏™‡πà‡∏á"
        )

        return builder.build()

    def _get_command_examples(self, command_name: str) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        cmd_info = self.command_info.get(command_name, {})
        return cmd_info.get("examples", ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"])

    def _format_command_options(self, command: app_commands.Command) -> List[str]:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö options ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        if not hasattr(command, "_params"):
            return []

        options = []
        for param in command._params.values():
            option_text = f"`{param.name}`"
            if param.description:
                option_text += f": {param.description}"
            if not param.required:
                option_text += " (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)"
            options.append(option_text)

        return options

    def _should_update_cache(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not self._last_cache_update:
            return True
        return (datetime.now() - self._last_cache_update).seconds > self._cache_ttl

    def _get_command_status(self, command_name: str) -> str:
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        cmd_info = self.command_info.get(command_name, {})
        status = []
        
        if cmd_info.get("dev_only"):
            status.append("üõ†Ô∏è Dev")
        if cmd_info.get("cooldown"):
            status.append(f"‚è±Ô∏è {cmd_info['cooldown']}s")
        if cmd_info.get("permissions"):
            status.append("üîí")
            
        return " ".join(status) if status else ""
    
    def _get_command_info(self, command: app_commands.Command) -> CommandInfo:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CommandInfo ‡∏à‡∏≤‡∏Å Command object"""
        base_info = self.command_info.get(command.name, {})
        options = []
        permissions = []

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
        if hasattr(command, "default_permissions"):
            perms = command.default_permissions
            if perms:
                permissions = [perm for perm, value in perms.items() if value]

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• options
        if hasattr(command, "_params"):
            for param in command._params.values():
                option_desc = f"`{param.name}`"
                if param.description:
                    option_desc += f": {param.description}"
                if not param.required:
                    option_desc += " (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)"
                options.append(option_desc)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á usage string
        usage = self._build_usage_string(command)

        return CommandInfo(
            name=command.name,
            description=base_info.get('description') or command.description or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
            usage=usage,
            emoji=base_info.get("emoji", "üîπ"),
            examples=base_info.get("examples", ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"]),
            category=base_info.get("category", "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"),
            options=options,
            dev_only=base_info.get("dev_only", False),
            cooldown=base_info.get("cooldown"),
            permissions=permissions,
        )

    def _filter_commands(self, commands) -> List[app_commands.Command]:
        """‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        filtered_commands = []
        for command in commands:
            cmd_info = self.command_info.get(command.name, {})
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô dev mode
            if cmd_info.get("dev_only", False) and not self.bot.dev_mode:
                continue
            filtered_commands.append(command)
        return filtered_commands

    def _build_usage_string(self, command: app_commands.Command) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        usage = f"/{command.name}"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if command.name == "dev":
            return (
                f"{usage} action:<Sync/Reload/Status/Cleanup> "
                "[scope:guild/global] [cog:name]"
            )

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        if hasattr(command, "_params"):
            for param in command._params.values():
                param_str = (
                    f" [{param.name}]" if not param.required else f" <{param.name}>"
                )
                usage += param_str

        return usage