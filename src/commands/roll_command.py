# commands/roll_command.py

from dataclasses import dataclass
from typing import Dict, Optional, Tuple
import discord
import random
import logging
from functools import lru_cache
from .base_command import BaseCommand
from utils.embed_builder import EmbedBuilder

logger = logging.getLogger(__name__)


@dataclass
class DiceResult:
    """‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤"""

    value: int
    color: discord.Color
    emoji: str
    message: Optional[str] = None
    is_critical: bool = False


@dataclass
class RollThresholds:
    """‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢"""

    COLORS: Dict[int, discord.Color]
    EMOJIS: Dict[int, str]
    MESSAGES: Dict[int, str]
    CRITICAL_VALUES: Tuple[int, ...]


class RollCommand(BaseCommand):
    """
    ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ D20
    ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """

    def __init__(self, bot):
        super().__init__(bot)
        self.thresholds = self._setup_thresholds()
        self.dice_cache = {}

    def _setup_thresholds(self) -> RollThresholds:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢"""
        return RollThresholds(
            COLORS={
                20: discord.Color.gold(),  # Critical Success
                15: discord.Color.green(),  # Great Roll
                10: discord.Color.blue(),  # Good Roll
                5: discord.Color.greyple(),  # Normal Roll
                1: discord.Color.red(),  # Critical Fail
            },
            EMOJIS={
                20: "üåü",  # Critical Success
                15: "‚ú®",  # Great Roll
                10: "üé≤",  # Good Roll
                5: "üéØ",  # Normal Roll
                1: "üí•",  # Critical Fail
            },
            MESSAGES={
                20: "‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î! ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!",
                15: "‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á!",
                10: "‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                5: "‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
                1: "‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î! ‡πÇ‡∏ä‡∏Ñ‡∏£‡πâ‡∏≤‡∏¢‡∏à‡∏±‡∏á!",
            },
            CRITICAL_VALUES=(1, 20),
        )

    async def execute(self, interaction: discord.Interaction, command_stats: dict):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á roll"""
        try:
            command_stats["roll"] += 1
            roll_value = self._roll_d20()
            result = self._evaluate_roll(roll_value)

            embed = await self._create_roll_embed(result, interaction.user)
            await interaction.response.send_message(embed=embed)

            self._log_roll(interaction.user, result)

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á roll: {str(e)}")
            error_embed = EmbedBuilder.create_error_embed(
                title="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤", description=str(e)
            )
            await interaction.response.send_message(embed=error_embed, ephemeral=True)

    def _roll_d20(self) -> int:
        """‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ D20"""
        return random.randint(1, 20)

    @lru_cache(maxsize=20)
    def _get_roll_color(self, roll: int) -> discord.Color:
        """‡∏´‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ"""
        for threshold, color in sorted(self.thresholds.COLORS.items(), reverse=True):
            if roll >= threshold:
                return color
        return discord.Color.greyple()

    def _get_roll_emoji(self, roll: int) -> str:
        """‡∏´‡∏≤ emoji ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ"""
        for threshold, emoji in sorted(self.thresholds.EMOJIS.items(), reverse=True):
            if roll >= threshold:
                return emoji
        return "üé≤"

    def _evaluate_roll(self, roll: int) -> DiceResult:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á DiceResult"""
        return DiceResult(
            value=roll,
            color=self._get_roll_color(roll),
            emoji=self._get_roll_emoji(roll),
            message=self._get_roll_message(roll),
            is_critical=roll in self.thresholds.CRITICAL_VALUES,
        )

    def _get_roll_message(self, roll: int) -> Optional[str]:
        """‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ"""
        for threshold, message in sorted(
            self.thresholds.MESSAGES.items(), reverse=True
        ):
            if roll >= threshold:
                return message
        return None

    def _log_roll(self, user: discord.User, result: DiceResult) -> None:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢"""
        status = "Critical!" if result.is_critical else "Normal"
        logger.debug(f"üé≤ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user} ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ {result.value} ({status})")

    def _get_roll_title(self, result: DiceResult) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢"""
        if result.value == 20:
            return "Critical Success!"
        elif result.value == 1:
            return "Critical Fail!"
        elif result.value >= 15:
            return "Great Roll!"
        else:
            return "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢"

    async def _create_roll_embed(
        self, result: DiceResult, user: discord.User
    ) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏î‡πâ‡∏ß‡∏¢ EmbedBuilder"""
        builder = EmbedBuilder()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        builder.set_title("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ D20", emoji=result.emoji).set_color(
            result.color
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢
        builder.add_field(
            name="‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ", value=f"**{result.value}**", emoji="üéØ", inline=False
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if result.message:
            builder.add_field(
                name=self._get_roll_title(result),
                value=result.message,
                emoji=(
                    "üìù"
                    if not result.is_critical
                    else "üéâ" if result.value == 20 else "üíî"
                ),
                inline=False,
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° footer ‡πÅ‡∏•‡∏∞ timestamp
        builder.set_footer(text=f"‡∏ó‡∏≠‡∏¢‡πÇ‡∏î‡∏¢ {user.name}", emoji="üé≤").set_timestamp()

        return builder.build()

    def _create_themed_embed(self, result: DiceResult) -> EmbedBuilder:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏ï‡∏≤‡∏°‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        if result.value == 20:
            return (
                EmbedBuilder()
                .set_title("Critical Success!", emoji="üåü")
                .set_color("gold")
                .set_description("‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î! ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!")
            )
        elif result.value == 1:
            return (
                EmbedBuilder()
                .set_title("Critical Fail!", emoji="üí•")
                .set_color("error")
                .set_description("‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î! ‡πÇ‡∏ä‡∏Ñ‡∏£‡πâ‡∏≤‡∏¢‡∏à‡∏±‡∏á!")
            )
        else:
            return EmbedBuilder().set_title("Roll Result", emoji="üé≤").set_color("info")
