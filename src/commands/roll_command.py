from typing import Dict
import discord
import random
import logging
from .base_command import BaseCommand
from src.utils.embed_builder import EmbedBuilder

logger = logging.getLogger(__name__)

class RollCommand(BaseCommand):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤"""

    async def execute(
        self,
        interaction: discord.Interaction,
        stats: Dict[str, int]
    ) -> None:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤"""
        try:
            # ‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
            roll = random.randint(1, 6)
            is_max = roll == 6
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            stats["roll"] = stats.get("roll", 0) + 1
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
            if is_max:
                embed = (
                    EmbedBuilder()
                    .set_title("‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î!", emoji="üéØ")
                    .set_description(f"‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ **{roll}** !")
                    .set_color("success")
                    .set_footer(f"‡∏ó‡∏≠‡∏¢‡πÇ‡∏î‡∏¢ {interaction.user.display_name}", emoji="üé≤")
                    .build()
                )
            else:
                embed = (
                    EmbedBuilder()
                    .set_title("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤", emoji="üé≤")
                    .set_description(f"‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ {roll}")
                    .set_color("primary")
                    .set_footer(f"‡∏ó‡∏≠‡∏¢‡πÇ‡∏î‡∏¢ {interaction.user.display_name}", emoji="üé≤")
                    .build()
                )

            # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            await interaction.response.send_message(embed=embed)
            logger.debug(f"üé≤ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ {roll}")

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á roll: {str(e)}")
            await self.handle_error(interaction, e)