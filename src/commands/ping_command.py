# commands/ping_command.py

from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Optional
import discord
import logging
from src.commands.base_command import BaseCommand
from src.utils.embed_builder import EmbedBuilder  # ‡πÅ‡∏Å‡πâ path import

logger = logging.getLogger(__name__)


@dataclass
class StatusInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
    status: str  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å color ‡πÄ‡∏õ‡πá‡∏ô status
    emoji: str
    description: str

@dataclass
class SystemStats:
    """‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""

    guild_count: int
    member_count: int
    total_commands: int
    command_stats: Dict[str, int]

    def format_stats(self) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        return (
            f"üè¢ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {self.guild_count}\n"
            f"üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {self.member_count:,}\n"
            f"üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {self.total_commands:,}\n"
            f"üé≤ Roll: {self.command_stats['roll']:,}\n"
            f"üèì Ping: {self.command_stats['ping']:,}"
        )


class PingCommand(BaseCommand):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""

    def __init__(self, bot):
        super().__init__(bot)
        self._setup_thresholds()

    def _setup_thresholds(self) -> None:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á"""
        self.LATENCY_THRESHOLDS = {
            100: StatusInfo(
                status="success",
                emoji=self.ui.EMOJI["success"],
                description="‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
            ),
            200: StatusInfo(
                status="warning",
                emoji=self.ui.EMOJI["warning"],
                description="‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            ),
            float("inf"): StatusInfo(
                status="error",
                emoji=self.ui.EMOJI["error"],
                description="‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≤"
            ),
        }

    def _get_status_info(self, latency: int) -> StatusInfo:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        for threshold, info in self.LATENCY_THRESHOLDS.items():
            if latency <= threshold:
                return info
        return self.LATENCY_THRESHOLDS[float("inf")]

    async def execute(
        self,
        interaction: discord.Interaction,
        bot_start_time: datetime,
        command_stats: Dict[str, int],
    ) -> None:
        """
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping

        Args:
            interaction: Discord interaction object
            bot_start_time: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            command_stats: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
        """
        try:
            command_stats["ping"] += 1
            latency = round(self.bot.latency * 1000)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á embed ‡∏î‡πâ‡∏ß‡∏¢ EmbedBuilder
            embed = await self._create_response_embed(
                latency=latency,
                user=interaction.user,
                bot_start_time=bot_start_time,
                stats=self._collect_system_stats(command_stats),
            )
            await interaction.response.send_message(embed=embed)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å
            self._log_execution(interaction.user, latency)

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping: {str(e)}")
            error_embed = EmbedBuilder.create_error_embed(description=str(e))
            await interaction.response.send_message(embed=error_embed, ephemeral=True)

    

    def _format_uptime(self, start_time: datetime) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        uptime = datetime.utcnow() - start_time
        components = []
        time_units = [
            ((uptime.seconds % 3600) // 60, "‡∏ô‡∏≤‡∏ó‡∏µ"),
            (uptime.seconds % 60, "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"),
        ]

        for value, unit in time_units:
            if value > 0 or not components:  # ‡∏£‡∏ß‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏™‡∏°‡∏≠
                components.append(f"{value} {unit}")

        return " ".join(components)

    def _collect_system_stats(self, command_stats: Dict[str, int]) -> SystemStats:
        """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        return SystemStats(
            guild_count=len(self.bot.guilds),
            member_count=sum(g.member_count for g in self.bot.guilds),
            total_commands=sum(command_stats.values()),
            command_stats=command_stats,
        )

    def _log_execution(self, user: discord.User, latency: int) -> None:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        logger.debug(f"üèì Ping command - Latency: {latency}ms ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user}")

    async def _create_response_embed(
        self,
        latency: int,
        user: discord.User,
        bot_start_time: datetime,
        stats: SystemStats,
    ) -> discord.Embed:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"""
        status_info = self._get_status_info(latency)
        uptime = self._format_uptime(bot_start_time)

        return (
            EmbedBuilder()
            .set_title("Pong!", emoji=self.ui.EMOJI["ping"])
            .set_description(f"{self.ui.EMOJI['stats']} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
            .set_color(self.ui.COLORS[status_info.status])
            .add_field(
                name="‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
                value=f"`{latency}ms`",
                emoji=self.ui.EMOJI["ping"],
                inline=True
            )
            .add_field(
                name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                value=f"{status_info.emoji} {status_info.description}",
                emoji=self.ui.EMOJI["info"],
                inline=True
            )
            .add_field(
                name="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
                value=uptime,
                emoji=self.ui.EMOJI["time"],
                inline=True
            )
            .add_field(
                name="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                value=stats.format_stats(),
                emoji=self.ui.EMOJI["stats"],
                inline=False
            )
            .set_footer(
                text=f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢ {user.name}",
                emoji=self.ui.EMOJI["search"]
            )
            .set_timestamp()
            .build()
        )
