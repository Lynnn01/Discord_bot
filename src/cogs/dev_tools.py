import discord
from discord.ext import commands
from discord import app_commands
import logging
import os
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
import asyncio
import psutil  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö

logger = logging.getLogger(__name__)


class DevCache:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Developer"""

    def __init__(self, timeout_minutes: int = 5):
        self._cache: Dict[int, tuple[datetime, bool]] = {}
        self._timeout = timedelta(minutes=timeout_minutes)

    def get(self, user_id: int) -> Optional[bool]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ dev ‡∏à‡∏≤‡∏Å cache"""
        if user_id in self._cache:
            timestamp, is_dev = self._cache[user_id]
            if datetime.utcnow() - timestamp < self._timeout:
                return is_dev
        return None

    def set(self, user_id: int, is_dev: bool) -> None:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ dev ‡∏•‡∏á cache"""
        self._cache[user_id] = (datetime.utcnow(), is_dev)

    def clear_expired(self) -> None:
        """‡∏•‡∏ö cache ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"""
        current_time = datetime.utcnow()
        self._cache = {
            user_id: (timestamp, is_dev)
            for user_id, (timestamp, is_dev) in self._cache.items()
            if current_time - timestamp < self._timeout
        }

    def count_active_devs(self) -> int:
        """‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô dev ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"""
        current_time = datetime.utcnow()
        return sum(
            1
            for _, (timestamp, is_dev) in self._cache.items()
            if current_time - timestamp < self._timeout and is_dev
        )

    def clear(self) -> None:
        """‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self._cache.clear()


class CommandHistory:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""

    def __init__(self, max_entries: int = 10):
        self._history: List[Dict[str, Any]] = []
        self._max_entries = max_entries

    def add(self, user: discord.User, action: str, success: bool) -> None:
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà"""
        try:
            entry = {
                "user": f"{user.name}#{user.discriminator}",
                "user_id": user.id,
                "action": action,
                "success": success,
                "timestamp": datetime.utcnow(),
            }
            self._history.append(entry)

            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            if len(self._history) > self._max_entries:
                self._history.pop(0)
        except Exception as e:
            logger.error(f"‚ùå Error adding command history: {e}")

    def get_recent(self, count: int = 5) -> List[Dict[str, Any]]:
        """‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        return list(reversed(self._history[-count:]))

    def clear(self) -> None:
        """‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self._history.clear()


class DevTools(commands.Cog):
    """Cog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤"""

    def __init__(self, bot):
        self.bot = bot
        self._last_sync = None
        self._ready = False
        self._dev_cache = DevCache()
        self._history = CommandHistory()
        self.old_commands = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
        self.process = psutil.Process()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stats
        if not hasattr(bot, "stats"):
            bot.stats = {
                "commands_used": 0,
                "errors_caught": 0,
                "messages_processed": 0,
            }

    def get_uptime(self) -> Optional[timedelta]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà bot ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        try:
            if hasattr(self.bot, "start_time"):
                if isinstance(self.bot.start_time, (int, float)):
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô timestamp
                    start_datetime = datetime.fromtimestamp(self.bot.start_time)
                    return datetime.now() - start_datetime
                elif isinstance(self.bot.start_time, datetime):
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô datetime
                    return datetime.now() - self.bot.start_time
            return None
        except Exception as e:
            logger.error(f"Error calculating uptime: {e}")
            return None

    async def _init_bot(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á bot"""
        try:
            logger.info("‚åõ Initializing DevTools...")
            await asyncio.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            await self.cleanup_old_commands()
            logger.info("‚úÖ DevTools initialization complete")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error during initialization: {e}")
            return False

    async def cleanup_old_commands(self) -> None:
        """‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        try:
            if not self.bot or not self.bot.tree:
                logger.error("‚ùå Bot ‡∏´‡∏£‡∏∑‡∏≠ command tree ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return

            dev_guild_id = os.getenv("DEV_GUILD_ID")

            # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å command tree
            for cmd_name in self.old_commands:
                # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô guild
                if dev_guild_id:
                    guild = discord.Object(id=int(dev_guild_id))
                    try:
                        cmd = self.bot.tree.get_command(cmd_name, guild=guild)
                        if cmd:
                            self.bot.tree.remove_command(cmd_name, guild=guild)
                            logger.info(f"‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd_name} ‡πÉ‡∏ô guild ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    except Exception as e:
                        logger.error(f"Error removing guild command {cmd_name}: {e}")

                # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á global
                if not self.bot.dev_mode:
                    try:
                        cmd = self.bot.tree.get_command(cmd_name)
                        if cmd:
                            self.bot.tree.remove_command(cmd_name)
                            logger.info(f"‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd_name} global ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    except Exception as e:
                        logger.error(f"Error removing global command {cmd_name}: {e}")

            # Sync ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            if dev_guild_id:
                guild = discord.Object(id=int(dev_guild_id))
                await self.bot.tree.sync(guild=guild)

            if not self.bot.dev_mode:
                await self.bot.tree.sync()

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {str(e)}")

    @commands.Cog.listener()
    async def on_ready(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        if not self._ready:
            self._ready = await self._init_bot()

    async def cog_load(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cog ÔøΩÔøΩÔøΩ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î"""
        logger.info("üîÑ DevTools cog loading...")
        if hasattr(self.bot, "stats"):
            self.bot.stats.setdefault("commands_used", 0)
            self.bot.stats.setdefault("errors_caught", 0)
            self.bot.stats.setdefault("messages_processed", 0)
        logger.info("‚úÖ DevTools cog loaded successfully")

    @app_commands.command(name="dev", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Developer")
    @app_commands.describe(
        action="‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        scope="‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£ sync (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sync)",
        cog="Cog ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reload (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ reload)",
    )
    @app_commands.choices(
        action=[
            app_commands.Choice(name="Sync Commands", value="sync"),
            app_commands.Choice(name="Reload Cogs", value="reload"),
            app_commands.Choice(name="Show Status", value="status"),
            app_commands.Choice(name="Cleanup Commands", value="cleanup"),
        ],
        scope=[
            app_commands.Choice(name="Global", value="global"),
            app_commands.Choice(name="Guild", value="guild"),
        ],
    )
    @app_commands.default_permissions(administrator=True)
    async def dev_command(
        self,
        interaction: discord.Interaction,
        action: str,
        scope: Optional[str] = None,
        cog: Optional[str] = None,
    ):
        """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Developer"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        if not await self._check_dev_permission(interaction):
            return

        try:
            await interaction.response.defer(ephemeral=True)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
            if not self._ready and action not in ["sync", "status"]:
                await interaction.followup.send(
                    "‚ö†Ô∏è Bot ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...\n"
                    "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á sync ‡πÅ‡∏•‡∏∞ status ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                    ephemeral=True,
                )
                return

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            handlers = {
                "sync": lambda: self._handle_sync(interaction, scope or "guild"),
                "reload": lambda: self._handle_reload(interaction, cog),
                "status": lambda: self._handle_status(interaction),
                "cleanup": lambda: self._handle_cleanup(interaction),
            }

            if action in handlers:
                await handlers[action]()
                self._history.add(interaction.user, action, True)
            else:
                await interaction.followup.send("‚ùå Invalid action", ephemeral=True)

        except Exception as e:
            logger.error(f"Error in dev command: {e}")
            self._history.add(interaction.user, action, False)
            await interaction.followup.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

    async def _handle_sync(self, interaction: discord.Interaction, scope: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ sync commands ‡πÇ‡∏î‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö scope ‡πÅ‡∏•‡∏∞ guild ID
            if scope == "guild":
                dev_guild_id = os.getenv("DEV_GUILD_ID")
                if not dev_guild_id:
                    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö DEV_GUILD_ID ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
                guild = discord.Object(id=int(dev_guild_id))
            else:
                if self.bot.dev_mode:
                    raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ sync ‡πÅ‡∏ö‡∏ö global ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Development")
                guild = None

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• commands ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            current_commands = {}  # Dict ‡πÄ‡∏Å‡πá‡∏ö command ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
            if guild:
                for cmd in self.bot.tree.get_commands(guild=guild):
                    current_commands[cmd.name] = cmd
            else:
                for cmd in self.bot.tree.get_commands():
                    current_commands[cmd.name] = cmd

            # ‡∏•‡∏ö commands ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
            logger.info(f"Removing {len(current_commands)} existing commands...")
            for cmd_name in current_commands:
                try:
                    if guild:
                        self.bot.tree.remove_command(cmd_name, guild=guild)
                        logger.debug(f"Removed guild command: {cmd_name}")
                    else:
                        self.bot.tree.remove_command(cmd_name)
                        logger.debug(f"Removed global command: {cmd_name}")
                except Exception as e:
                    logger.warning(f"Failed to remove command {cmd_name}: {e}")

            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Discord API ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
            await asyncio.sleep(2)

            # Clear command tree cache
            self.bot.tree.clear_commands(guild=guild)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° commands ‡πÉ‡∏´‡∏°‡πà
            new_commands = set()  # ‡πÉ‡∏ä‡πâ set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
            if guild:
                # Copy global commands ‡πÑ‡∏õ‡∏¢‡∏±‡∏á guild ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
                for cmd in self.bot.tree._global_commands.values():
                    if cmd.name not in new_commands:
                        self.bot.tree.add_command(cmd, guild=guild)
                        new_commands.add(cmd.name)
                        logger.debug(f"Added command to guild: {cmd.name}")

            # Sync commands
            try:
                if guild:
                    commands = await self.bot.tree.sync(guild=guild)
                else:
                    commands = await self.bot.tree.sync()

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á sync
                command_names = [cmd.name for cmd in commands]
                duplicates = [
                    name for name in command_names if command_names.count(name) > 1
                ]

                if duplicates:
                    logger.warning(
                        f"Found duplicate commands after sync: {set(duplicates)}"
                    )
                    # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡πÅ‡∏•‡∏∞ sync ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    for name in set(duplicates):
                        if guild:
                            self.bot.tree.remove_command(name, guild=guild)
                        else:
                            self.bot.tree.remove_command(name)

                    # Sync ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö duplicates
                    if guild:
                        commands = await self.bot.tree.sync(guild=guild)
                    else:
                        commands = await self.bot.tree.sync()

            except Exception as e:
                logger.error(f"Error during command sync: {e}")
                raise

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ sync
            sync_info = {
                "scope": scope,
                "old_count": len(current_commands),
                "new_count": len(commands),
                "timestamp": discord.utils.utcnow(),
            }
            self._last_sync = sync_info

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed response
            response = discord.Embed(
                title="‚úÖ Sync Commands",
                description="‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
                color=discord.Color.green(),
            )
            response.add_field(
                name="‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                value=f"```\n"
                f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°: {len(current_commands)}\n"
                f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: {len(commands)}\n"
                f"```",
                inline=False,
            )
            response.add_field(name="Scope", value=scope)
            response.add_field(
                name="‡πÄ‡∏ß‡∏•‡∏≤", value=discord.utils.format_dt(sync_info["timestamp"], "R")
            )

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            command_list = "\n".join(f"‚Ä¢ /{cmd.name}" for cmd in commands)
            if command_list:
                response.add_field(
                    name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
                    value=command_list[:1024],  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1024 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    inline=False,
                )

            await interaction.followup.send(embed=response, ephemeral=True)
            logger.info(
                f"Commands synced ({scope}) by {interaction.user} "
                f"[Old: {len(current_commands)}, New: {len(commands)}]"
            )

        except Exception as e:
            logger.error(f"Error in command sync: {e}")
            raise

    async def _handle_reload(
        self, interaction: discord.Interaction, cog_name: Optional[str]
    ):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ reload cogs"""
        base_cogs = {
            "commands": "src.cogs.commands",
            "events": "src.cogs.event_handler",
            "dev": "src.cogs.dev_tools",
        }

        try:
            if cog_name and cog_name not in base_cogs:
                raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö Cog '{cog_name}'")

            cogs_to_reload = [base_cogs[cog_name]] if cog_name else base_cogs.values()
            reloaded = []

            for cog in cogs_to_reload:
                await self.bot.reload_extension(cog)
                reloaded.append(cog.split(".")[-1])
                logger.info(f"Reloaded {cog}")

            response = discord.Embed(
                title="‚úÖ Reload Cogs",
                description="\n".join(f"‚Ä¢ {cog}" for cog in reloaded),
                color=discord.Color.green(),
            )

            await interaction.followup.send(embed=response, ephemeral=True)
            logger.info(f"Cogs reloaded by {interaction.user}")

        except Exception as e:
            logger.error(f"Error reloading cogs: {e}")
            raise

    async def _handle_status(self, interaction: discord.Interaction):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì uptime
            uptime = self.get_uptime()
            uptime_text = str(uptime).split(".")[0] if uptime else "N/A"

            status_embed = discord.Embed(
                title="üõ†Ô∏è Developer Status", color=discord.Color.blue()
            )

            # Bot Info
            status_embed.add_field(
                name="ü§ñ Bot Info",
                value=f"```\n"
                f"Mode: {'Development' if self.bot.dev_mode else 'Production'}\n"
                f"Guilds: {len(self.bot.guilds)}\n"
                f"Commands: {len(self.bot.tree.get_commands())}\n"
                f"Uptime: {uptime_text}\n"
                f"```",
                inline=False,
            )

            # Last Sync Info
            if self._last_sync:
                sync_time = discord.utils.format_dt(self._last_sync["timestamp"], "R")
                status_embed.add_field(
                    name="üîÑ Last Sync",
                    value=f"```\n"
                    f"Scope: {self._last_sync['scope']}\n"
                    f"Commands: {self._last_sync['count']}\n"
                    f"Time: {sync_time}\n"
                    f"```",
                    inline=False,
                )

            # System Stats
            process_info = await self._get_bot_process_info()
            if process_info:
                status_embed.add_field(
                    name="üíª System Stats",
                    value=f"```\n"
                    f"Memory: {process_info['memory_mb']:.1f} MB\n"
                    f"CPU: {process_info['cpu_percent']}%\n"
                    f"Threads: {process_info['threads']}\n"
                    f"Guilds: {len(self.bot.guilds)}\n"
                    f"Commands Used: {self.bot.stats['commands_used']}\n"
                    f"Errors Caught: {self.bot.stats['errors_caught']}\n"
                    f"Messages Processed: {self.bot.stats['messages_processed']}\n"
                    f"```",
                    inline=False,
                )

            # Recent Activity
            recent_commands = self._history.get_recent(5)
            if recent_commands:
                activity_text = "\n".join(
                    f"‚Ä¢ {entry['user']}: {entry['action']} "
                    f"({discord.utils.format_dt(entry['timestamp'], 'R')})"
                    for entry in recent_commands
                )
                status_embed.add_field(
                    name="üìù Recent Activity", value=activity_text, inline=False
                )

            # Dev Cache Info
            cached_devs = self._dev_cache.count_active_devs()
            status_embed.set_footer(text=f"üîë Cached Dev Permissions: {cached_devs}")
            await interaction.followup.send(embed=status_embed, ephemeral=True)

        except Exception as e:
            logger.error(f"Error showing status: {e}")
            raise

    async def _handle_cleanup(self, interaction: discord.Interaction):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤"""
        try:
            if not self._ready:
                await interaction.followup.send(
                    "‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
                    ephemeral=True,
                )
                return

            await self.cleanup_old_commands()
            embed = discord.Embed(
                title="‚úÖ Cleanup Commands",
                description="‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                color=discord.Color.green(),
            )
            await interaction.followup.send(embed=embed, ephemeral=True)

        except Exception as e:
            logger.error(f"Error cleaning up commands: {e}")
            raise

    async def _get_bot_process_info(self) -> Dict[str, Any]:
        """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"""
        try:
            with self.process.oneshot():
                cpu_percent = self.process.cpu_percent()
                memory_info = self.process.memory_info()
                threads = self.process.num_threads()
                io_counters = self.process.io_counters()

            return {
                "cpu_percent": cpu_percent,
                "memory_mb": memory_info.rss / 1024 / 1024,
                "threads": threads,
                "pid": self.process.pid,
                "read_bytes": io_counters.read_bytes,
                "write_bytes": io_counters.write_bytes,
            }
        except Exception as e:
            logger.error(f"Error getting process info: {e}")
            return {}

    async def _check_dev_permission(self, interaction: discord.Interaction) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå developer"""
        try:
            user_id = interaction.user.id

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
            cached_result = self._dev_cache.get(user_id)
            if cached_result is not None:
                if not cached_result:
                    await interaction.response.send_message(
                        "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Developer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True
                    )
                return cached_result

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
            is_dev = await self.bot.is_owner(interaction.user)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô dev mode
            if not is_dev and self.bot.dev_mode:
                dev_guild_id = os.getenv("DEV_GUILD_ID")
                if dev_guild_id and str(interaction.guild_id) == dev_guild_id:
                    member = interaction.guild.get_member(user_id)
                    if member:
                        dev_roles = {"Developer", "Admin", "Owner"}
                        user_roles = {role.name for role in member.roles}
                        is_dev = bool(user_roles & dev_roles)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á cache
            self._dev_cache.set(user_id, is_dev)

            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
            if not is_dev:
                await interaction.response.send_message(
                    "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Developer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True
                )
                logger.warning(f"üö´ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")

            return is_dev

        except Exception as e:
            logger.error(f"‚ùå Error checking dev permission: {e}")
            await interaction.response.send_message(
                "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", ephemeral=True
            )
            return False

    @commands.Cog.listener()
    async def on_interaction(self, interaction: discord.Interaction):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô interaction"""
        if interaction.command:
            self.bot.stats["commands_used"] += 1
            self._dev_cache.clear_expired()

    @commands.Cog.listener()
    async def on_guild_join(self, guild: discord.Guild):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤ guild ‡πÉ‡∏´‡∏°‡πà"""
        if self.bot.dev_mode:
            dev_guild_id = os.getenv("DEV_GUILD_ID")
            if str(guild.id) != dev_guild_id:
                logger.warning(f"üö´ Leaving non-dev guild in dev mode: {guild.name}")
                await guild.leave()
                return
        logger.info(f"‚úÖ Joined guild: {guild.name} (ID: {guild.id})")

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        await self.bot.error_handler.handle_error(
            ctx, error, include_traceback=self.bot.dev_mode
        )

    async def cog_unload(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cog ‡∏ñ‡∏π‡∏Å unload"""
        try:
            logger.info("üíæ Saving important data before unload...")
            self._dev_cache.clear()
            self._history.clear()
            logger.info("üëã DevTools cog unloaded successfully")
        except Exception as e:
            logger.error(f"‚ùå Error during cog unload: {e}")


async def setup(bot):
    await bot.add_cog(DevTools(bot))
