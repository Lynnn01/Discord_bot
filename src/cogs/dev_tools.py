import discord
from discord.ext import commands
from discord import app_commands
import logging
import os
from typing import Optional

logger = logging.getLogger(__name__)


class DevTools(commands.Cog):
    """Cog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤"""

    def __init__(self, bot):
        self.bot = bot
        self.base_cogs = {
            "commands": "src.cogs.commands",
            "events": "src.cogs.event_handler",
            "dev": "src.cogs.dev_tools",
        }

    async def cog_load(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î cog"""
        try:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dev ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_command = self.bot.tree.get_command("dev")
            if existing_command:
                self.bot.tree.remove_command("dev")
                logger.info("üîÑ Removed duplicate dev command")

                # Sync ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                if self.bot.dev_mode and (dev_guild_id := os.getenv("DEV_GUILD_ID")):
                    guild = discord.Object(id=int(dev_guild_id))
                    await self.bot.tree.sync(guild=guild)
                else:
                    await self.bot.tree.sync()

            logger.info("‚úÖ DevTools cog loaded")
        except Exception as e:
            logger.error(f"‚ùå Error during cog load: {e}")

    @app_commands.command(name="dev", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Developer")
    @app_commands.describe(
        action="‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        scope="‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£ sync (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sync)",
        cog="Cog ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reload (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ reload)",
    )
    @app_commands.choices(
        action=[
            app_commands.Choice(name="Sync Commands", value="sync"),
            app_commands.Choice(name="Reload Cogs", value="reload"),
        ],
        scope=[
            app_commands.Choice(name="Global", value="global"),
            app_commands.Choice(name="Guild", value="guild"),
        ],
    )
    @app_commands.default_permissions(administrator=True)
    async def dev_command(
        self,
        interaction: discord.Interaction,
        action: str,
        scope: Optional[str] = None,
        cog: Optional[str] = None,
    ):
        """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Developer"""
        if not await self.bot.is_owner(interaction.user):
            await interaction.response.send_message(
                "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Developer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True
            )
            return

        try:
            await interaction.response.defer(ephemeral=True)

            if action == "sync":
                await self._handle_sync(interaction, scope or "guild")
            elif action == "reload":
                await self._handle_reload(interaction, cog)

        except Exception as e:
            logger.error(f"Error in dev command: {e}")
            if not interaction.response.is_done():
                await interaction.followup.send(
                    f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True
                )

    async def _handle_sync(self, interaction: discord.Interaction, scope: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ sync commands"""
        try:
            if scope == "guild":
                dev_guild_id = os.getenv("DEV_GUILD_ID")
                if not dev_guild_id:
                    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö DEV_GUILD_ID ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

                guild = discord.Object(id=int(dev_guild_id))

                # ‡∏•‡πâ‡∏≤‡∏á commands ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                self.bot.tree.clear_commands(guild=guild)
                # Copy global commands ‡∏°‡∏≤‡∏ó‡∏µ‡πà guild
                self.bot.tree.copy_global_to(guild=guild)
                # Sync commands
                commands = await self.bot.tree.sync(guild=guild)

                logger.info(
                    f"üîÑ Synced {len(commands)} commands to guild {dev_guild_id}"
                )

            else:  # global scope
                if self.bot.dev_mode:
                    raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ sync ‡πÅ‡∏ö‡∏ö global ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Development")

                # ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ sync commands global
                self.bot.tree.clear_commands()
                commands = await self.bot.tree.sync()
                logger.info(f"üîÑ Synced {len(commands)} commands globally")

            await interaction.followup.send(
                f"‚úÖ Sync {len(commands)} commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n" f"üìç Scope: {scope}",
                ephemeral=True,
            )

        except Exception as e:
            logger.error(f"Error syncing commands: {e}")
            raise

    async def _handle_reload(
        self, interaction: discord.Interaction, cog_name: Optional[str]
    ):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ reload cogs"""
        try:
            if cog_name:
                if cog_name not in self.base_cogs:
                    raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö Cog '{cog_name}'")
                cogs_to_reload = [self.base_cogs[cog_name]]
            else:
                cogs_to_reload = list(self.base_cogs.values())

            reloaded = []
            for cog in cogs_to_reload:
                try:
                    await self.bot.reload_extension(cog)
                    reloaded.append(cog.split(".")[-1])
                    logger.info(f"üîÑ Reloaded {cog}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to reload {cog}: {e}")
                    raise

            await interaction.followup.send(
                f"‚úÖ Reloaded successfully:\n"
                + "\n".join(f"‚Ä¢ {cog}" for cog in reloaded),
                ephemeral=True,
            )

        except Exception as e:
            logger.error(f"Error reloading cogs: {e}")
            raise


async def setup(bot):
    await bot.add_cog(DevTools(bot))
