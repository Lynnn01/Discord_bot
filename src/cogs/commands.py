import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime
from typing import Optional
import logging
import os

from ..commands.ping_command import PingCommand
from ..commands.roll_command import RollCommand
from ..commands.help_command import HelpCommand

logger = logging.getLogger(__name__)


class CommandsCog(commands.Cog):
    """Cog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"""

    def __init__(self, bot):
        self.bot = bot
        self.start_time = datetime.now()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á command instances
        self.ping_cmd = PingCommand(bot)
        self.roll_cmd = RollCommand(bot)
        self.help_cmd = HelpCommand(bot)

        # Register commands
        self._setup_commands()

    async def _setup_commands(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ commands"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            for cmd_name in ["ping", "roll", "help"]:
                existing_cmd = self.bot.tree.get_command(cmd_name)
                if existing_cmd:
                    self.bot.tree.remove_command(cmd_name)
                    logger.info(f"üîÑ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd_name} ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
            commands = {
                "ping": self.ping_cmd.execute,
                "roll": self.roll_cmd.execute,
                "help": self.help_cmd.execute
            }

            for cmd_name, cmd_func in commands.items():
                cmd = app_commands.Command(
                    name=cmd_name,
                    description=self.command_descriptions.get(cmd_name, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"),
                    callback=cmd_func
                )
                self.bot.tree.add_command(cmd)
                logger.debug(f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {cmd_name}")

            # Sync commands ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å ready
            self.bot.add_listener(self._sync_commands, 'on_ready')
            
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {str(e)}")
            raise

    async def _sync_commands(self):
        """Sync commands ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å bot ready"""
        try:
            if self.bot.dev_mode:
                guild_id = int(os.getenv("DEV_GUILD_ID"))
                guild = discord.Object(id=guild_id)
                await self.bot.tree.sync(guild=guild)
            else:
                await self.bot.tree.sync()
                
            commands = self.bot.tree.get_commands()
            logger.info(f"üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {', '.join(cmd.name for cmd in commands)}")
            
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {str(e)}")

    @commands.Cog.listener()
    async def on_ready(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cog ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        try:
            # sync commands ‡∏Å‡∏±‡∏ö Discord
            await self.bot.tree.sync()

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ commands ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            commands = self.bot.tree.get_commands()
            logger.info(
                f"üìù Registered commands: {', '.join(cmd.name for cmd in commands)}"
            )

            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ dev mode
            if self.bot.dev_mode:
                logger.info("‚ö†Ô∏è Running in development mode")

        except Exception as e:
            logger.error(f"‚ùå Error in CommandsCog on_ready: {str(e)}")


async def setup(bot):
    await bot.add_cog(CommandsCog(bot))
