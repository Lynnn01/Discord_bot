import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime
from typing import Optional
import logging

from ..commands.ping_command import PingCommand
from ..commands.roll_command import RollCommand
from ..commands.help_command import HelpCommand
from src.utils.exceptions import DevModeError

logger = logging.getLogger(__name__)


class CommandsCog(commands.Cog):
    """Cog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"""

    def __init__(self, bot):
        self.bot = bot
        self.start_time = datetime.now()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á command instances
        self.ping_cmd = PingCommand(bot)
        self.roll_cmd = RollCommand(bot)
        self.help_cmd = HelpCommand(bot)

        # Register commands
        self._setup_commands()

    def _setup_commands(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ commands"""

        # Command: ping
        @app_commands.command(name="ping", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
        async def ping(interaction: discord.Interaction):
            await self.ping_cmd.execute(interaction, self.start_time, self.bot.stats)

        # Command: roll
        @app_commands.command(name="roll", description="‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤")
        async def roll(interaction: discord.Interaction):
            await self.roll_cmd.execute(interaction, self.bot.stats)

        # Command: help
        @app_commands.command(name="help", description="‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
        @app_commands.describe(command="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        async def help(interaction: discord.Interaction, command: Optional[str] = None):
            await self.help_cmd.execute(
                interaction, self.bot.stats, command_name=command
            )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° commands ‡πÄ‡∏Ç‡πâ‡∏≤ CommandTree
        for cmd in [ping, roll, help]:
            self.bot.tree.add_command(cmd)
            logger.debug(f"‚úÖ Registered command: {cmd.name}")

        logger.info("‚úÖ Registered all commands successfully")

    @commands.Cog.listener()
    async def on_ready(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cog ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        try:
            # sync commands ‡∏Å‡∏±‡∏ö Discord
            await self.bot.tree.sync()

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ commands ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            commands = self.bot.tree.get_commands()
            logger.info(
                f"üìù Registered commands: {', '.join(cmd.name for cmd in commands)}"
            )

            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ dev mode
            if self.bot.dev_mode:
                logger.info("‚ö†Ô∏è Running in development mode")

        except Exception as e:
            logger.error(f"‚ùå Error in CommandsCog on_ready: {str(e)}")

    @commands.Cog.listener()
    async def on_command_error(self, ctx: commands.Context, error: Exception):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏Å‡∏ï‡∏¥"""
        await self.bot.error_handler.handle_error(ctx, error)
        
    @commands.Cog.listener()
    async def on_app_command_error(
        self,
        interaction: discord.Interaction,
        error: app_commands.AppCommandError
    ):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏à‡∏≤‡∏Å slash commands"""
        await self.bot.error_handler.handle_error(interaction, error)


async def setup(bot):
    await bot.add_cog(CommandsCog(bot))
